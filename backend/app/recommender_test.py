"""
Test pour les recommandations de films
Utilise la nouvelle architecture modulaire avec ProfileCreator et MovieRecommender
"""

from core.profile_creator import ProfileCreator
from core.recommender import MovieRecommender
from models.movie import Movies, Movie
from models.profile import Profile

# Exemple d'utilisation avec les classes
if __name__ == "__main__":
    print("üé¨ D√âMONSTRATION DE L'INT√âGRATION PROFILE_CREATOR + MOVIE_RECOMMENDER")
    print("=" * 70)
    
    # Cr√©er les instances des classes
    profile_creator = ProfileCreator()
    movie_recommender = MovieRecommender()
    
    # √âtape 1: Cr√©er un profil utilisateur √† partir de films favoris
    print("\nüìù √âTAPE 1: Cr√©ation du profil utilisateur")
    favorite_movies = ["Home Alone", "The mask"]
    user_name = "Alice"
    
    print(f"Films favoris de {user_name}: {', '.join(favorite_movies)}")
    print("üîÑ Cr√©ation du profil en cours...")
    
    try:
        # Utiliser la m√©thode de la classe ProfileCreator
        user_profile = profile_creator.create_user_profile(favorite_movies, user_name)
        print("‚úÖ Profil cr√©√© avec succ√®s!")
        
        # Afficher un r√©sum√© du profil
        print(f"\nüë§ PROFIL DE {user_profile.user_name.upper()}:")
        print(f"üé≠ Genres favoris: {', '.join(user_profile.favorite_genres[:3])}{'...' if len(user_profile.favorite_genres) > 3 else ''}")
        print(f"üé¨ R√©alisateurs favoris: {', '.join(user_profile.favorite_directors[:2])}{'...' if len(user_profile.favorite_directors) > 2 else ''}")
        print(f"üí≠ Traits: {user_profile.personality_traits[:100]}...")
        
        # √âtape 2: G√©n√©rer des recommandations bas√©es sur le profil
        print(f"\nüéØ √âTAPE 2: G√©n√©ration de recommandations personnalis√©es")
        print("üîÑ Analyse du profil et recherche de films adapt√©s...")
        
        # Utiliser la m√©thode de la classe MovieRecommender
        recommendations = movie_recommender.get_recommendations_from_profile(user_profile)
        
        print(f"‚úÖ {len(recommendations.movies)} recommandations g√©n√©r√©es!")
        
        # Afficher les r√©sultats
        print(f"\nüé¨ FILMS RECOMMAND√âS POUR {user_profile.user_name.upper()}:")
        print("=" * 50)
        
        for i, movie in enumerate(recommendations.movies, 1):
            print(f"\n{i}. üé≠ {movie.title} ({movie.year})")
            print(f"   üìÇ Genre: {movie.genre}")
            if movie.director:
                print(f"   üé¨ R√©alisateur: {movie.director}")
            print(f"   üí° Pourquoi recommand√©: {movie.why_recommended}")
            if movie.cast:
                print(f"   ‚≠ê Cast: {', '.join(movie.cast[:3])}{'...' if len(movie.cast) > 3 else ''}")
            if movie.poster_path:
                print(f"   üñºÔ∏è Poster: ‚úÖ")
            print("   " + "-" * 40)
        
        print(f"\nüéâ D√âMONSTRATION TERMIN√âE AVEC SUCC√àS!")
        print("‚úÖ Le syst√®me ProfileCreator + MovieRecommender fonctionne parfaitement!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la d√©monstration: {str(e)}")
        print("\nüîÑ Utilisation de l'ancienne m√©thode comme fallback...")
        
        # Fallback vers l'ancienne m√©thode avec la classe
        recommendations = movie_recommender.get_recommendations_legacy(favorite_movies)
        
        print("Films recommand√©s (m√©thode classique):")
        for movie in recommendations.movies:
            print(f"\n- {movie.title} ({movie.year})")
        print("Films recommand√©s (m√©thode classique):")
        for movie in recommendations.movies:
            print(f"\n- {movie.title} ({movie.year})")
            print(f"  Genre: {movie.genre}")
            print(f"  R√©alisateur: {movie.director}")
            print(f"  Pourquoi recommand√©: {movie.why_recommended}")
